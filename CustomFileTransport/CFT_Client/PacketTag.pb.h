// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketTag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PacketTag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PacketTag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PacketTag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PacketTag_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketTag_2eproto;
namespace PacketTag {
class AnsChatNormal;
struct AnsChatNormalDefaultTypeInternal;
extern AnsChatNormalDefaultTypeInternal _AnsChatNormal_default_instance_;
class AnsChatWhisper;
struct AnsChatWhisperDefaultTypeInternal;
extern AnsChatWhisperDefaultTypeInternal _AnsChatWhisper_default_instance_;
class AnsExitRequest;
struct AnsExitRequestDefaultTypeInternal;
extern AnsExitRequestDefaultTypeInternal _AnsExitRequest_default_instance_;
class AnsLoginRequest;
struct AnsLoginRequestDefaultTypeInternal;
extern AnsLoginRequestDefaultTypeInternal _AnsLoginRequest_default_instance_;
class AnsUserListRequest;
struct AnsUserListRequestDefaultTypeInternal;
extern AnsUserListRequestDefaultTypeInternal _AnsUserListRequest_default_instance_;
class ChatNormal;
struct ChatNormalDefaultTypeInternal;
extern ChatNormalDefaultTypeInternal _ChatNormal_default_instance_;
class ChatWhisper;
struct ChatWhisperDefaultTypeInternal;
extern ChatWhisperDefaultTypeInternal _ChatWhisper_default_instance_;
class ExitRequest;
struct ExitRequestDefaultTypeInternal;
extern ExitRequestDefaultTypeInternal _ExitRequest_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class PacketMsg;
struct PacketMsgDefaultTypeInternal;
extern PacketMsgDefaultTypeInternal _PacketMsg_default_instance_;
class UserListRequest;
struct UserListRequestDefaultTypeInternal;
extern UserListRequestDefaultTypeInternal _UserListRequest_default_instance_;
}  // namespace PacketTag
PROTOBUF_NAMESPACE_OPEN
template<> ::PacketTag::AnsChatNormal* Arena::CreateMaybeMessage<::PacketTag::AnsChatNormal>(Arena*);
template<> ::PacketTag::AnsChatWhisper* Arena::CreateMaybeMessage<::PacketTag::AnsChatWhisper>(Arena*);
template<> ::PacketTag::AnsExitRequest* Arena::CreateMaybeMessage<::PacketTag::AnsExitRequest>(Arena*);
template<> ::PacketTag::AnsLoginRequest* Arena::CreateMaybeMessage<::PacketTag::AnsLoginRequest>(Arena*);
template<> ::PacketTag::AnsUserListRequest* Arena::CreateMaybeMessage<::PacketTag::AnsUserListRequest>(Arena*);
template<> ::PacketTag::ChatNormal* Arena::CreateMaybeMessage<::PacketTag::ChatNormal>(Arena*);
template<> ::PacketTag::ChatWhisper* Arena::CreateMaybeMessage<::PacketTag::ChatWhisper>(Arena*);
template<> ::PacketTag::ExitRequest* Arena::CreateMaybeMessage<::PacketTag::ExitRequest>(Arena*);
template<> ::PacketTag::LoginRequest* Arena::CreateMaybeMessage<::PacketTag::LoginRequest>(Arena*);
template<> ::PacketTag::PacketMsg* Arena::CreateMaybeMessage<::PacketTag::PacketMsg>(Arena*);
template<> ::PacketTag::UserListRequest* Arena::CreateMaybeMessage<::PacketTag::UserListRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PacketTag {

enum PacketType : int {
  LOGIN_REQUEST = 0,
  CHAT_NORMAL = 1,
  CHAT_WHISPER = 2,
  USER_LIST_REQUEST = 3,
  EXIT_REQUEST = 4,
  PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PacketType_IsValid(int value);
constexpr PacketType PacketType_MIN = LOGIN_REQUEST;
constexpr PacketType PacketType_MAX = EXIT_REQUEST;
constexpr int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor();
template<typename T>
inline const std::string& PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketType_descriptor(), enum_t_value);
}
inline bool PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
enum LoginResultType : int {
  LOGIN_SUCCESS = 0,
  LOGIN_FAIL = 1,
  LoginResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginResultType_IsValid(int value);
constexpr LoginResultType LoginResultType_MIN = LOGIN_SUCCESS;
constexpr LoginResultType LoginResultType_MAX = LOGIN_FAIL;
constexpr int LoginResultType_ARRAYSIZE = LoginResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResultType_descriptor();
template<typename T>
inline const std::string& LoginResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResultType_descriptor(), enum_t_value);
}
inline bool LoginResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResultType>(
    LoginResultType_descriptor(), name, value);
}
enum ExitType : int {
  EXIT_NORMAL = 0,
  EXIT_DESTRUCTOR = 1,
  ExitType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExitType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExitType_IsValid(int value);
constexpr ExitType ExitType_MIN = EXIT_NORMAL;
constexpr ExitType ExitType_MAX = EXIT_DESTRUCTOR;
constexpr int ExitType_ARRAYSIZE = ExitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExitType_descriptor();
template<typename T>
inline const std::string& ExitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExitType_descriptor(), enum_t_value);
}
inline bool ExitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExitType>(
    ExitType_descriptor(), name, value);
}
// ===================================================================

class PacketMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.PacketMsg) */ {
 public:
  inline PacketMsg() : PacketMsg(nullptr) {}
  ~PacketMsg() override;
  explicit constexpr PacketMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketMsg(const PacketMsg& from);
  PacketMsg(PacketMsg&& from) noexcept
    : PacketMsg() {
    *this = ::std::move(from);
  }

  inline PacketMsg& operator=(const PacketMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketMsg& operator=(PacketMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketMsg* internal_default_instance() {
    return reinterpret_cast<const PacketMsg*>(
               &_PacketMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketMsg& a, PacketMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketMsg* New() const final {
    return new PacketMsg();
  }

  PacketMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PacketMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.PacketMsg";
  }
  protected:
  explicit PacketMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kDataFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .PacketTag.PacketType type = 1;
  void clear_type();
  ::PacketTag::PacketType type() const;
  void set_type(::PacketTag::PacketType value);
  private:
  ::PacketTag::PacketType _internal_type() const;
  void _internal_set_type(::PacketTag::PacketType value);
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.PacketMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return new LoginRequest();
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class AnsLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.AnsLoginRequest) */ {
 public:
  inline AnsLoginRequest() : AnsLoginRequest(nullptr) {}
  ~AnsLoginRequest() override;
  explicit constexpr AnsLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsLoginRequest(const AnsLoginRequest& from);
  AnsLoginRequest(AnsLoginRequest&& from) noexcept
    : AnsLoginRequest() {
    *this = ::std::move(from);
  }

  inline AnsLoginRequest& operator=(const AnsLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsLoginRequest& operator=(AnsLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsLoginRequest* internal_default_instance() {
    return reinterpret_cast<const AnsLoginRequest*>(
               &_AnsLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnsLoginRequest& a, AnsLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsLoginRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsLoginRequest* New() const final {
    return new AnsLoginRequest();
  }

  AnsLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnsLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnsLoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsLoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.AnsLoginRequest";
  }
  protected:
  explicit AnsLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .PacketTag.LoginResultType type = 2;
  void clear_type();
  ::PacketTag::LoginResultType type() const;
  void set_type(::PacketTag::LoginResultType value);
  private:
  ::PacketTag::LoginResultType _internal_type() const;
  void _internal_set_type(::PacketTag::LoginResultType value);
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.AnsLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class ChatNormal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.ChatNormal) */ {
 public:
  inline ChatNormal() : ChatNormal(nullptr) {}
  ~ChatNormal() override;
  explicit constexpr ChatNormal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatNormal(const ChatNormal& from);
  ChatNormal(ChatNormal&& from) noexcept
    : ChatNormal() {
    *this = ::std::move(from);
  }

  inline ChatNormal& operator=(const ChatNormal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatNormal& operator=(ChatNormal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatNormal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatNormal* internal_default_instance() {
    return reinterpret_cast<const ChatNormal*>(
               &_ChatNormal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatNormal& a, ChatNormal& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatNormal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatNormal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatNormal* New() const final {
    return new ChatNormal();
  }

  ChatNormal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatNormal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatNormal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatNormal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatNormal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.ChatNormal";
  }
  protected:
  explicit ChatNormal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.ChatNormal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class AnsChatNormal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.AnsChatNormal) */ {
 public:
  inline AnsChatNormal() : AnsChatNormal(nullptr) {}
  ~AnsChatNormal() override;
  explicit constexpr AnsChatNormal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsChatNormal(const AnsChatNormal& from);
  AnsChatNormal(AnsChatNormal&& from) noexcept
    : AnsChatNormal() {
    *this = ::std::move(from);
  }

  inline AnsChatNormal& operator=(const AnsChatNormal& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsChatNormal& operator=(AnsChatNormal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsChatNormal& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsChatNormal* internal_default_instance() {
    return reinterpret_cast<const AnsChatNormal*>(
               &_AnsChatNormal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnsChatNormal& a, AnsChatNormal& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsChatNormal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsChatNormal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsChatNormal* New() const final {
    return new AnsChatNormal();
  }

  AnsChatNormal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsChatNormal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnsChatNormal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnsChatNormal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsChatNormal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.AnsChatNormal";
  }
  protected:
  explicit AnsChatNormal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kNicknameFieldNumber = 2,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.AnsChatNormal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class ChatWhisper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.ChatWhisper) */ {
 public:
  inline ChatWhisper() : ChatWhisper(nullptr) {}
  ~ChatWhisper() override;
  explicit constexpr ChatWhisper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatWhisper(const ChatWhisper& from);
  ChatWhisper(ChatWhisper&& from) noexcept
    : ChatWhisper() {
    *this = ::std::move(from);
  }

  inline ChatWhisper& operator=(const ChatWhisper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatWhisper& operator=(ChatWhisper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatWhisper& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatWhisper* internal_default_instance() {
    return reinterpret_cast<const ChatWhisper*>(
               &_ChatWhisper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatWhisper& a, ChatWhisper& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatWhisper* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatWhisper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatWhisper* New() const final {
    return new ChatWhisper();
  }

  ChatWhisper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatWhisper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatWhisper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatWhisper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatWhisper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.ChatWhisper";
  }
  protected:
  explicit ChatWhisper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNicknameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string targetNickname = 1;
  void clear_targetnickname();
  const std::string& targetnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetnickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_targetnickname();
  void set_allocated_targetnickname(std::string* targetnickname);
  private:
  const std::string& _internal_targetnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetnickname(const std::string& value);
  std::string* _internal_mutable_targetnickname();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.ChatWhisper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetnickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class AnsChatWhisper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.AnsChatWhisper) */ {
 public:
  inline AnsChatWhisper() : AnsChatWhisper(nullptr) {}
  ~AnsChatWhisper() override;
  explicit constexpr AnsChatWhisper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsChatWhisper(const AnsChatWhisper& from);
  AnsChatWhisper(AnsChatWhisper&& from) noexcept
    : AnsChatWhisper() {
    *this = ::std::move(from);
  }

  inline AnsChatWhisper& operator=(const AnsChatWhisper& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsChatWhisper& operator=(AnsChatWhisper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsChatWhisper& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsChatWhisper* internal_default_instance() {
    return reinterpret_cast<const AnsChatWhisper*>(
               &_AnsChatWhisper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AnsChatWhisper& a, AnsChatWhisper& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsChatWhisper* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsChatWhisper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsChatWhisper* New() const final {
    return new AnsChatWhisper();
  }

  AnsChatWhisper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsChatWhisper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnsChatWhisper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnsChatWhisper& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsChatWhisper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.AnsChatWhisper";
  }
  protected:
  explicit AnsChatWhisper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNicknameFieldNumber = 1,
    kDataFieldNumber = 2,
    kNicknameFieldNumber = 3,
  };
  // string targetNickname = 1;
  void clear_targetnickname();
  const std::string& targetnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetnickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_targetnickname();
  void set_allocated_targetnickname(std::string* targetnickname);
  private:
  const std::string& _internal_targetnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetnickname(const std::string& value);
  std::string* _internal_mutable_targetnickname();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.AnsChatWhisper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetnickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class UserListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.UserListRequest) */ {
 public:
  inline UserListRequest() : UserListRequest(nullptr) {}
  ~UserListRequest() override;
  explicit constexpr UserListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserListRequest(const UserListRequest& from);
  UserListRequest(UserListRequest&& from) noexcept
    : UserListRequest() {
    *this = ::std::move(from);
  }

  inline UserListRequest& operator=(const UserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListRequest& operator=(UserListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserListRequest* internal_default_instance() {
    return reinterpret_cast<const UserListRequest*>(
               &_UserListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserListRequest& a, UserListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserListRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserListRequest* New() const final {
    return new UserListRequest();
  }

  UserListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.UserListRequest";
  }
  protected:
  explicit UserListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.UserListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class AnsUserListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.AnsUserListRequest) */ {
 public:
  inline AnsUserListRequest() : AnsUserListRequest(nullptr) {}
  ~AnsUserListRequest() override;
  explicit constexpr AnsUserListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsUserListRequest(const AnsUserListRequest& from);
  AnsUserListRequest(AnsUserListRequest&& from) noexcept
    : AnsUserListRequest() {
    *this = ::std::move(from);
  }

  inline AnsUserListRequest& operator=(const AnsUserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsUserListRequest& operator=(AnsUserListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsUserListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsUserListRequest* internal_default_instance() {
    return reinterpret_cast<const AnsUserListRequest*>(
               &_AnsUserListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AnsUserListRequest& a, AnsUserListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsUserListRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsUserListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsUserListRequest* New() const final {
    return new AnsUserListRequest();
  }

  AnsUserListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsUserListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnsUserListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnsUserListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsUserListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.AnsUserListRequest";
  }
  protected:
  explicit AnsUserListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated string data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.AnsUserListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class ExitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.ExitRequest) */ {
 public:
  inline ExitRequest() : ExitRequest(nullptr) {}
  ~ExitRequest() override;
  explicit constexpr ExitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExitRequest(const ExitRequest& from);
  ExitRequest(ExitRequest&& from) noexcept
    : ExitRequest() {
    *this = ::std::move(from);
  }

  inline ExitRequest& operator=(const ExitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitRequest& operator=(ExitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExitRequest* internal_default_instance() {
    return reinterpret_cast<const ExitRequest*>(
               &_ExitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExitRequest& a, ExitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExitRequest* New() const final {
    return new ExitRequest();
  }

  ExitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.ExitRequest";
  }
  protected:
  explicit ExitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .PacketTag.ExitType type = 1;
  void clear_type();
  ::PacketTag::ExitType type() const;
  void set_type(::PacketTag::ExitType value);
  private:
  ::PacketTag::ExitType _internal_type() const;
  void _internal_set_type(::PacketTag::ExitType value);
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.ExitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// -------------------------------------------------------------------

class AnsExitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketTag.AnsExitRequest) */ {
 public:
  inline AnsExitRequest() : AnsExitRequest(nullptr) {}
  ~AnsExitRequest() override;
  explicit constexpr AnsExitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnsExitRequest(const AnsExitRequest& from);
  AnsExitRequest(AnsExitRequest&& from) noexcept
    : AnsExitRequest() {
    *this = ::std::move(from);
  }

  inline AnsExitRequest& operator=(const AnsExitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnsExitRequest& operator=(AnsExitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnsExitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnsExitRequest* internal_default_instance() {
    return reinterpret_cast<const AnsExitRequest*>(
               &_AnsExitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AnsExitRequest& a, AnsExitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AnsExitRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnsExitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnsExitRequest* New() const final {
    return new AnsExitRequest();
  }

  AnsExitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnsExitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnsExitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnsExitRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnsExitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketTag.AnsExitRequest";
  }
  protected:
  explicit AnsExitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .PacketTag.ExitType type = 1;
  void clear_type();
  ::PacketTag::ExitType type() const;
  void set_type(::PacketTag::ExitType value);
  private:
  ::PacketTag::ExitType _internal_type() const;
  void _internal_set_type(::PacketTag::ExitType value);
  public:

  // @@protoc_insertion_point(class_scope:PacketTag.AnsExitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketTag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketMsg

// .PacketTag.PacketType type = 1;
inline void PacketMsg::clear_type() {
  type_ = 0;
}
inline ::PacketTag::PacketType PacketMsg::_internal_type() const {
  return static_cast< ::PacketTag::PacketType >(type_);
}
inline ::PacketTag::PacketType PacketMsg::type() const {
  // @@protoc_insertion_point(field_get:PacketTag.PacketMsg.type)
  return _internal_type();
}
inline void PacketMsg::_internal_set_type(::PacketTag::PacketType value) {
  
  type_ = value;
}
inline void PacketMsg::set_type(::PacketTag::PacketType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PacketTag.PacketMsg.type)
}

// string nickname = 2;
inline void PacketMsg::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& PacketMsg::nickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.PacketMsg.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PacketMsg::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.PacketMsg.nickname)
}
inline std::string* PacketMsg::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.PacketMsg.nickname)
  return _s;
}
inline const std::string& PacketMsg::_internal_nickname() const {
  return nickname_.Get();
}
inline void PacketMsg::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PacketMsg::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PacketMsg::release_nickname() {
  // @@protoc_insertion_point(field_release:PacketTag.PacketMsg.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PacketMsg::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.PacketMsg.nickname)
}

// string data = 3;
inline void PacketMsg::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PacketMsg::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.PacketMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PacketMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.PacketMsg.data)
}
inline std::string* PacketMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.PacketMsg.data)
  return _s;
}
inline const std::string& PacketMsg::_internal_data() const {
  return data_.Get();
}
inline void PacketMsg::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PacketMsg::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PacketMsg::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.PacketMsg.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PacketMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.PacketMsg.data)
}

// -------------------------------------------------------------------

// LoginRequest

// string nickname = 1;
inline void LoginRequest::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& LoginRequest::nickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.LoginRequest.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.LoginRequest.nickname)
}
inline std::string* LoginRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.LoginRequest.nickname)
  return _s;
}
inline const std::string& LoginRequest::_internal_nickname() const {
  return nickname_.Get();
}
inline void LoginRequest::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:PacketTag.LoginRequest.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRequest::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.LoginRequest.nickname)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:PacketTag.LoginRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:PacketTag.LoginRequest.password)
  return _s;
}
inline const std::string& LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:PacketTag.LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.LoginRequest.password)
}

// -------------------------------------------------------------------

// AnsLoginRequest

// string nickname = 1;
inline void AnsLoginRequest::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& AnsLoginRequest::nickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsLoginRequest.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsLoginRequest::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsLoginRequest.nickname)
}
inline std::string* AnsLoginRequest::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsLoginRequest.nickname)
  return _s;
}
inline const std::string& AnsLoginRequest::_internal_nickname() const {
  return nickname_.Get();
}
inline void AnsLoginRequest::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsLoginRequest::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsLoginRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsLoginRequest.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsLoginRequest::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsLoginRequest.nickname)
}

// .PacketTag.LoginResultType type = 2;
inline void AnsLoginRequest::clear_type() {
  type_ = 0;
}
inline ::PacketTag::LoginResultType AnsLoginRequest::_internal_type() const {
  return static_cast< ::PacketTag::LoginResultType >(type_);
}
inline ::PacketTag::LoginResultType AnsLoginRequest::type() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsLoginRequest.type)
  return _internal_type();
}
inline void AnsLoginRequest::_internal_set_type(::PacketTag::LoginResultType value) {
  
  type_ = value;
}
inline void AnsLoginRequest::set_type(::PacketTag::LoginResultType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PacketTag.AnsLoginRequest.type)
}

// -------------------------------------------------------------------

// ChatNormal

// string data = 1;
inline void ChatNormal::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ChatNormal::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.ChatNormal.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatNormal::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.ChatNormal.data)
}
inline std::string* ChatNormal::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.ChatNormal.data)
  return _s;
}
inline const std::string& ChatNormal::_internal_data() const {
  return data_.Get();
}
inline void ChatNormal::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatNormal::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatNormal::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.ChatNormal.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatNormal::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.ChatNormal.data)
}

// -------------------------------------------------------------------

// AnsChatNormal

// string data = 1;
inline void AnsChatNormal::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AnsChatNormal::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsChatNormal.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsChatNormal::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsChatNormal.data)
}
inline std::string* AnsChatNormal::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsChatNormal.data)
  return _s;
}
inline const std::string& AnsChatNormal::_internal_data() const {
  return data_.Get();
}
inline void AnsChatNormal::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsChatNormal::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsChatNormal::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsChatNormal.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsChatNormal::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsChatNormal.data)
}

// string nickname = 2;
inline void AnsChatNormal::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& AnsChatNormal::nickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsChatNormal.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsChatNormal::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsChatNormal.nickname)
}
inline std::string* AnsChatNormal::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsChatNormal.nickname)
  return _s;
}
inline const std::string& AnsChatNormal::_internal_nickname() const {
  return nickname_.Get();
}
inline void AnsChatNormal::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsChatNormal::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsChatNormal::release_nickname() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsChatNormal.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsChatNormal::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsChatNormal.nickname)
}

// -------------------------------------------------------------------

// ChatWhisper

// string targetNickname = 1;
inline void ChatWhisper::clear_targetnickname() {
  targetnickname_.ClearToEmpty();
}
inline const std::string& ChatWhisper::targetnickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.ChatWhisper.targetNickname)
  return _internal_targetnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatWhisper::set_targetnickname(ArgT0&& arg0, ArgT... args) {
 
 targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.ChatWhisper.targetNickname)
}
inline std::string* ChatWhisper::mutable_targetnickname() {
  std::string* _s = _internal_mutable_targetnickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.ChatWhisper.targetNickname)
  return _s;
}
inline const std::string& ChatWhisper::_internal_targetnickname() const {
  return targetnickname_.Get();
}
inline void ChatWhisper::_internal_set_targetnickname(const std::string& value) {
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatWhisper::_internal_mutable_targetnickname() {
  
  return targetnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatWhisper::release_targetnickname() {
  // @@protoc_insertion_point(field_release:PacketTag.ChatWhisper.targetNickname)
  return targetnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatWhisper::set_allocated_targetnickname(std::string* targetnickname) {
  if (targetnickname != nullptr) {
    
  } else {
    
  }
  targetnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.ChatWhisper.targetNickname)
}

// string data = 2;
inline void ChatWhisper::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ChatWhisper::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.ChatWhisper.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatWhisper::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.ChatWhisper.data)
}
inline std::string* ChatWhisper::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.ChatWhisper.data)
  return _s;
}
inline const std::string& ChatWhisper::_internal_data() const {
  return data_.Get();
}
inline void ChatWhisper::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatWhisper::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatWhisper::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.ChatWhisper.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatWhisper::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.ChatWhisper.data)
}

// -------------------------------------------------------------------

// AnsChatWhisper

// string targetNickname = 1;
inline void AnsChatWhisper::clear_targetnickname() {
  targetnickname_.ClearToEmpty();
}
inline const std::string& AnsChatWhisper::targetnickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsChatWhisper.targetNickname)
  return _internal_targetnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsChatWhisper::set_targetnickname(ArgT0&& arg0, ArgT... args) {
 
 targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsChatWhisper.targetNickname)
}
inline std::string* AnsChatWhisper::mutable_targetnickname() {
  std::string* _s = _internal_mutable_targetnickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsChatWhisper.targetNickname)
  return _s;
}
inline const std::string& AnsChatWhisper::_internal_targetnickname() const {
  return targetnickname_.Get();
}
inline void AnsChatWhisper::_internal_set_targetnickname(const std::string& value) {
  
  targetnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsChatWhisper::_internal_mutable_targetnickname() {
  
  return targetnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsChatWhisper::release_targetnickname() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsChatWhisper.targetNickname)
  return targetnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsChatWhisper::set_allocated_targetnickname(std::string* targetnickname) {
  if (targetnickname != nullptr) {
    
  } else {
    
  }
  targetnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsChatWhisper.targetNickname)
}

// string data = 2;
inline void AnsChatWhisper::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AnsChatWhisper::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsChatWhisper.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsChatWhisper::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsChatWhisper.data)
}
inline std::string* AnsChatWhisper::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsChatWhisper.data)
  return _s;
}
inline const std::string& AnsChatWhisper::_internal_data() const {
  return data_.Get();
}
inline void AnsChatWhisper::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsChatWhisper::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsChatWhisper::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsChatWhisper.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsChatWhisper::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsChatWhisper.data)
}

// string nickname = 3;
inline void AnsChatWhisper::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& AnsChatWhisper::nickname() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsChatWhisper.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsChatWhisper::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsChatWhisper.nickname)
}
inline std::string* AnsChatWhisper::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsChatWhisper.nickname)
  return _s;
}
inline const std::string& AnsChatWhisper::_internal_nickname() const {
  return nickname_.Get();
}
inline void AnsChatWhisper::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsChatWhisper::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsChatWhisper::release_nickname() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsChatWhisper.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsChatWhisper::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsChatWhisper.nickname)
}

// -------------------------------------------------------------------

// UserListRequest

// repeated string data = 1;
inline int UserListRequest::_internal_data_size() const {
  return data_.size();
}
inline int UserListRequest::data_size() const {
  return _internal_data_size();
}
inline void UserListRequest::clear_data() {
  data_.Clear();
}
inline std::string* UserListRequest::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:PacketTag.UserListRequest.data)
  return _s;
}
inline const std::string& UserListRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& UserListRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:PacketTag.UserListRequest.data)
  return _internal_data(index);
}
inline std::string* UserListRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:PacketTag.UserListRequest.data)
  return data_.Mutable(index);
}
inline void UserListRequest::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PacketTag.UserListRequest.data)
}
inline void UserListRequest::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PacketTag.UserListRequest.data)
}
inline void UserListRequest::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PacketTag.UserListRequest.data)
}
inline void UserListRequest::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PacketTag.UserListRequest.data)
}
inline std::string* UserListRequest::_internal_add_data() {
  return data_.Add();
}
inline void UserListRequest::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PacketTag.UserListRequest.data)
}
inline void UserListRequest::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PacketTag.UserListRequest.data)
}
inline void UserListRequest::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PacketTag.UserListRequest.data)
}
inline void UserListRequest::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PacketTag.UserListRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserListRequest::data() const {
  // @@protoc_insertion_point(field_list:PacketTag.UserListRequest.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserListRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PacketTag.UserListRequest.data)
  return &data_;
}

// -------------------------------------------------------------------

// AnsUserListRequest

// repeated string data = 1;
inline int AnsUserListRequest::_internal_data_size() const {
  return data_.size();
}
inline int AnsUserListRequest::data_size() const {
  return _internal_data_size();
}
inline void AnsUserListRequest::clear_data() {
  data_.Clear();
}
inline std::string* AnsUserListRequest::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:PacketTag.AnsUserListRequest.data)
  return _s;
}
inline const std::string& AnsUserListRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& AnsUserListRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsUserListRequest.data)
  return _internal_data(index);
}
inline std::string* AnsUserListRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsUserListRequest.data)
  return data_.Mutable(index);
}
inline void AnsUserListRequest::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PacketTag.AnsUserListRequest.data)
}
inline void AnsUserListRequest::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PacketTag.AnsUserListRequest.data)
}
inline void AnsUserListRequest::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PacketTag.AnsUserListRequest.data)
}
inline void AnsUserListRequest::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PacketTag.AnsUserListRequest.data)
}
inline std::string* AnsUserListRequest::_internal_add_data() {
  return data_.Add();
}
inline void AnsUserListRequest::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PacketTag.AnsUserListRequest.data)
}
inline void AnsUserListRequest::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PacketTag.AnsUserListRequest.data)
}
inline void AnsUserListRequest::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PacketTag.AnsUserListRequest.data)
}
inline void AnsUserListRequest::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PacketTag.AnsUserListRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnsUserListRequest::data() const {
  // @@protoc_insertion_point(field_list:PacketTag.AnsUserListRequest.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnsUserListRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:PacketTag.AnsUserListRequest.data)
  return &data_;
}

// -------------------------------------------------------------------

// ExitRequest

// .PacketTag.ExitType type = 1;
inline void ExitRequest::clear_type() {
  type_ = 0;
}
inline ::PacketTag::ExitType ExitRequest::_internal_type() const {
  return static_cast< ::PacketTag::ExitType >(type_);
}
inline ::PacketTag::ExitType ExitRequest::type() const {
  // @@protoc_insertion_point(field_get:PacketTag.ExitRequest.type)
  return _internal_type();
}
inline void ExitRequest::_internal_set_type(::PacketTag::ExitType value) {
  
  type_ = value;
}
inline void ExitRequest::set_type(::PacketTag::ExitType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PacketTag.ExitRequest.type)
}

// string data = 2;
inline void ExitRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ExitRequest::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.ExitRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExitRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.ExitRequest.data)
}
inline std::string* ExitRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.ExitRequest.data)
  return _s;
}
inline const std::string& ExitRequest::_internal_data() const {
  return data_.Get();
}
inline void ExitRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExitRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExitRequest::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.ExitRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExitRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.ExitRequest.data)
}

// -------------------------------------------------------------------

// AnsExitRequest

// .PacketTag.ExitType type = 1;
inline void AnsExitRequest::clear_type() {
  type_ = 0;
}
inline ::PacketTag::ExitType AnsExitRequest::_internal_type() const {
  return static_cast< ::PacketTag::ExitType >(type_);
}
inline ::PacketTag::ExitType AnsExitRequest::type() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsExitRequest.type)
  return _internal_type();
}
inline void AnsExitRequest::_internal_set_type(::PacketTag::ExitType value) {
  
  type_ = value;
}
inline void AnsExitRequest::set_type(::PacketTag::ExitType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PacketTag.AnsExitRequest.type)
}

// string data = 2;
inline void AnsExitRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AnsExitRequest::data() const {
  // @@protoc_insertion_point(field_get:PacketTag.AnsExitRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnsExitRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PacketTag.AnsExitRequest.data)
}
inline std::string* AnsExitRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:PacketTag.AnsExitRequest.data)
  return _s;
}
inline const std::string& AnsExitRequest::_internal_data() const {
  return data_.Get();
}
inline void AnsExitRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AnsExitRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AnsExitRequest::release_data() {
  // @@protoc_insertion_point(field_release:PacketTag.AnsExitRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AnsExitRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PacketTag.AnsExitRequest.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PacketTag

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PacketTag::PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacketTag::PacketType>() {
  return ::PacketTag::PacketType_descriptor();
}
template <> struct is_proto_enum< ::PacketTag::LoginResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacketTag::LoginResultType>() {
  return ::PacketTag::LoginResultType_descriptor();
}
template <> struct is_proto_enum< ::PacketTag::ExitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PacketTag::ExitType>() {
  return ::PacketTag::ExitType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PacketTag_2eproto
